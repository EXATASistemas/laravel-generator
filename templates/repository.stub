<?php

namespace $NAMESPACE_REPOSITORY$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use InfyOm\Generator\Common\BaseRepository;
use Prettus\Repository\Events\RepositoryEntityDeleted;

$DOCS$
class $MODEL_NAME$Repository extends BaseRepository
{
    /**
     * @var array
     */
    protected $fieldSearchable = [
        $FIELDS$
    ];

    /**
     * Configure the Model
     **/
    public function model()
    {
        return $MODEL_NAME$::class;
    }

    /**
     * Retrieve first data of repository, or create new Entity
     *
     * @param array $attributes
     *
     * @return mixed
     */
    public function create(array $attributes)
    {
        // Troque o sql_rowid pelo campo cÃ³digo da entidade gerada
        // Insiro o valor do campo sql_rowid pegando o ultimo usado + 1
        // $sql_rowid = 1 + $this->findWhere([['sql_rowid','>',"0"]])->max('sql_rowid');
        // $attributes['sql_rowid'] = sql_rowid;
        // Have to skip presenter to get a model not some data
        $temporarySkipPresenter = $this->skipPresenter;
        $this->skipPresenter(true);
        $model = parent::create($attributes);
        $this->skipPresenter($temporarySkipPresenter);
        $model = $this->updateRelations($model, $attributes);
        $model->save();
        return $this->parserResult($model);
    }

    /**
     * Delete a entity in repository by id
     *
     * @param $id
     *
     * @return int
     */
    public function delete($id)
    {

        if(!is_array($id)){

            $this->applyScope();
            $temporarySkipPresenter = $this->skipPresenter;
            $this->skipPresenter(true);
            $model = $this->find($id);
            $originalModel = clone $model;
            $this->skipPresenter($temporarySkipPresenter);
            $this->resetModel();
            if ($model->sql_deleted){
                $model->sql_deleted = 'T';
                $deleted = $model->save();
            }else{
                $deleted = $model->delete();
            }
            event(new RepositoryEntityDeleted($this, $originalModel));
            return $deleted;
        }else{            
            if ($this->model->getKeyName() == 'sql_rowid' ) {
                $deleted = $this->model->whereIn('sql_rowid', $id)->update(['sql_deleted'=>'T']);
            } else {
                $deleted = $this->model->whereIn('id', $id)->delete();
            }
            return $deleted;
        }
    }
}
